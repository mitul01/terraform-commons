name: "Preflight"

on:
  pull_request:

jobs:
  extract-changed-directories:
    name: "extract-changed-directories"
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Set up Git
        run: git fetch origin main

      - name: Pull origin
        run: git pull origin main --rebase

      - name: Get unique changed projects
        id: changed-dirs
        run: |
          git diff --name-only HEAD HEAD~1 | \
          grep '\.tf$' | \
          sed 's|/[^/]*$||' | \
          sort -u | \
          jq -R -s -c 'split("\n") | map(select(length > 0))' > changed_dirs.json
          echo "Unique changed directories:"
          cat changed_dirs.json
          echo "::set-output name=dirs::$(cat changed_dirs.json)"

  terraform-preflight:
    name: "terraform-preflight"
    runs-on: ubuntu-latest
    permissions:
      pull-requests: write
    needs: extract-changed-directories
    strategy:
      matrix:
        dir: ${{ fromJson(needs.extract-changed-directories.outputs.dirs) }}
    defaults:
      run:
        working-directory: ${{ matrix.dir }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1
        with:
          terraform_version: 0.13.0
          cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}

      - name: Terraform Format
        id: fmt
        run: terraform fmt -check

      - name: Terraform Init
        id: init
        run: terraform init
      
      - name: Terraform Validate
        id: validate
        run: terraform validate -no-color

      - name: Terraform Plan
        id: plan
        if: github.event_name == 'pull_request'
        run: terraform plan -no-color -input=false
        continue-on-error: true

      - name: Update Pull Request
        uses: actions/github-script@v6
        if: github.event_name == 'pull_request'
        env:
          PLAN: ${{ steps.plan.outputs.stdout }}
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const output = `#### Terraform Format and Style üñå\`${{ steps.fmt.outcome }}\`
            #### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
            #### Terraform Validation ü§ñ\`${{ steps.validate.outcome }}\`
            #### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`

            <details><summary>Show Plan</summary>

            \`\`\`terraform\n
            ${process.env.PLAN}
            \`\`\`

            </details>

            *Pushed by: @${{ github.actor }}, Action: \`${{ github.event_name }}\`*`;

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })

      - name: Terraform Plan Status
        if: steps.plan.outcome == 'failure'
        run: exit 1
